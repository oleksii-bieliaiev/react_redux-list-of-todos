{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","InitialParams","all","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","newQuery","newStatus","dispatch","todosForList","normalizeTodosWithQuery","title","toLowerCase","includes","active","completed","length","className","map","id","todoSelect","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","getApiUser","a","userId","data","useEffect","href","email","name","App","isLoading","setIsLoading","getApiTodos","todosActions","reject","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7caf7d9e.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype StatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\nconst setQuery = (query: string): QueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): StatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype Action = QueryAction | StatusAction;\n\nexport const actions = { setQuery, setStatus };\n\ntype FilterParams = {\n  query: string,\n  status: Status,\n};\n\nconst InitialParams = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (\n  state: FilterParams = InitialParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodoAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]):TodoAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = TodoAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filteredTodos = (\n    currentTodos: Todo[],\n    newQuery: string,\n    newStatus: Status,\n  ) => {\n    return currentTodos.filter((todo) => {\n      const normalizeTodosWithQuery\n        = todo.title.toLowerCase().includes(newQuery.toLowerCase());\n\n      switch (newStatus) {\n        case Status.active:\n          return !todo.completed && normalizeTodosWithQuery;\n        case Status.completed:\n          return todo.completed && normalizeTodosWithQuery;\n        default:\n          return normalizeTodosWithQuery;\n      }\n    });\n  };\n\n  const todosForList = filteredTodos(todos, query, status);\n\n  return (\n    <>\n      {!todosForList.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todosForList.map(todo => {\n                const { id, title, completed } = todo;\n                const todoSelect = id === currentTodo?.id;\n\n                return (\n                  <tr\n                    key={id}\n                    data-cy=\"todo\"\n                    className={classNames(\n                      { 'has-background-info-light': todoSelect },\n                    )}\n                  >\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                      >\n                        {title}\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far', {\n                            'fa-eye': !todoSelect,\n                            'fa-eye-slash': todoSelect,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const queryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const statusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={statusChange}\n          >\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={queryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete-button\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const getApiUser = async () => {\n    if (currentTodo) {\n      const data = await getUser(currentTodo.userId);\n\n      setUser(data);\n    }\n  };\n\n  useEffect(() => {\n    getApiUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (<Loader />)\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"remove-button\"\n                onClick={() => dispatch(currentTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo?.completed\n                  ? <strong className=\"has-text-danger\">Planned</strong>\n                  : <strong className=\"has-text-success\">Done</strong>}\n                {' by '}\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const getApiTodos = async () => {\n    setIsLoading(true);\n\n    try {\n      const data = await getTodos();\n\n      dispatch(todosActions.setTodos(data));\n    } catch {\n      Promise.reject(new Error('error'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getApiTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList /> }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo !== null && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}